{"file_contents":{"design_guidelines.md":{"content":"# Gador SNC 85th Anniversary Interactive Installation Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from futuristic sci-fi interfaces like those in films such as *Minority Report* and *Inside Out*, combined with modern data visualization aesthetics. The design emphasizes neurological connectivity, energy flow, and corporate sophistication.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors:**\n- Primary Blue: 219 100% 31% (trust, depth, corporate base)\n- Secondary Teal: 178 100% 33% (freshness, modernity, vitality) \n- Tertiary Light Blue: 199 68% 69% (openness, calm, clarity)\n- Neutral White: 0 0% 100% (contrast, clarity, negative space)\n\n**Usage:** Colors apply to neural network pulses, text glows, HUD containers, and background gradients. Use teal for active phrase highlights, blue for neural connections, and white for primary text.\n\n### B. Typography\n- **Primary:** Avenir Next (Variable weight)\n- **Fallback:** Helvetica Neue, system fonts\n- **Styling:** Medium to Bold weights for visibility, glowing text effects, subtle pulsation animations\n- **Hierarchy:** Large display text for floating phrases, smaller text for HUD elements and controls\n\n### C. Layout System\n**Stage Display (Fullscreen Projection):**\n- Full viewport neural network background\n- Floating text positioned using CSS transforms and 3D space\n- HUD elements positioned absolutely in corners/edges\n- No traditional grid - organic, flowing placement\n\n**Mobile Remote:**\n- Standard mobile-first responsive grid\n- Tailwind spacing: primarily 4, 6, 8 units (p-4, m-6, h-8)\n- Touch-friendly button sizing (minimum 44px)\n- Clean, minimal interface focused on functionality\n\n### D. Component Library\n\n**Stage Components:**\n- Neural Network Background: Dynamic particle system with pulsing connections\n- Floating Text Phrases: Multi-layer depth system with varying opacity\n- HUD Containers: Glowing rectangular frames for contextual information\n- Camera Overlay: Countdown timer and capture interface\n\n**Remote Control Components:**\n- Scene Selection Cards: Large, touch-friendly trigger buttons\n- Connection Status Indicator: Real-time WebSocket status\n- Audio Controls: Volume and playback indicators\n- Emergency Controls: Reset and stop functions\n\n**Shared Elements:**\n- Loading states with neural pulse animations\n- Error states with subtle red tinting\n- Success feedback with teal accent highlights\n\n### E. Visual Effects & Motion\n- **Entrance Animations:** Mask-and-reveal with scale-in effects (0.32-0.48s duration)\n- **Text Orbiting:** Horizontal movement cycles with opacity transitions\n- **Neural Pulses:** Organic electrical signal animations\n- **Glow Effects:** CSS text-shadow and box-shadow for sci-fi aesthetic\n- **Easing:** Exponential and power curves for cinematic feel\n- **Performance:** Hardware-accelerated transforms, optimized particle counts\n\n### F. Interaction Patterns\n- **Mobile Remote:** Large tap targets, immediate visual feedback, haptic feedback where available\n- **Stage Display:** No direct interaction - purely visual display\n- **Real-time Sync:** Instant phrase triggering with WebSocket communication\n- **Error Handling:** Graceful degradation with offline fallbacks\n\n### G. Accessibility Considerations\n- High contrast ratios maintained despite glow effects\n- Alternative text descriptions for screen readers where applicable\n- Keyboard navigation support for remote interface\n- Volume controls and audio indicators\n- Emergency stop functionality always accessible\n\nThis installation balances cutting-edge visual design with functional reliability, creating an immersive brand experience that showcases Gador's innovative spirit while maintaining professional standards for live presentation environments.","size_bytes":3774},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Gador SNC 85th Anniversary Interactive Installation\n\n## Overview\n\nThis is an interactive motion design installation created for Gador SNC's 85th anniversary celebration. The system features a futuristic audiovisual experience that visualizes thoughts and inner voices as illuminated Spanish phrases floating within a pulsating, neuron-inspired neural network background. The installation consists of two main components: a fullscreen stage display for large-screen projections and a mobile remote control interface for real-time interaction.\n\nThe project implements a sci-fi inspired design aesthetic drawing from films like \"Minority Report\" and \"Inside Out\", featuring dynamic particle systems, floating text animations, and HUD-style interfaces. The installation cycles through five distinct scenes, each with its own collection of Spanish phrases that appear with various animation styles and opacity layers.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom brand color palette and futuristic design tokens\n- **Animation**: GSAP for complex phrase animations and tsParticles for neural network background\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React hooks with shared state interfaces\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript for API endpoints\n- **Data Layer**: In-memory storage with interface for future database integration\n- **Real-time Communication**: WebSocket support planned for remote control synchronization\n- **Session Management**: Built-in session handling for installation state persistence\n\n### Component Architecture\nThe system is organized into specialized components:\n\n**Stage Display Components:**\n- `NeuralBackground`: Multi-layer tsParticles system with neural networks, pulses, and burst effects\n- `FloatingPhrase`: GSAP-powered phrase animation engine with four entry styles (draw, focus, flash, mask)\n- `PhotoBooth`: Camera integration for visitor photo capture\n- `StageDisplay`: Main orchestrator component managing scene transitions and phrase lifecycles\n\n**Remote Control Components:**\n- `RemoteControl`: Mobile-optimized control interface\n- `SceneSelector`: Touch-friendly scene navigation with color-coded buttons\n- `ConnectionStatus`: Real-time WebSocket connection monitoring\n\n### Animation System\nThe phrase animation system implements a sophisticated orbital cycle:\n1. **Entry Phase**: Phrases appear using one of four styles (handwriting draw, focus blur, character flash, mask reveal)\n2. **Front Orbit**: 8-second left-to-right movement at 100% opacity\n3. **Back Mirror**: 8-second right-to-left movement at 35% opacity with teal tinting\n4. **Return Cycle**: 8-second left-to-right return at 65% opacity\n5. **Loop State**: Continuous slow drift with maintained opacity\n\nEach phrase is mapped to specific vertical lanes (A=22%, B=38%, C=54%, D=70%) and triggers synchronized neural burst effects.\n\n### Design System\n- **Color Palette**: Gador brand colors including Primary Blue (#0033A0), Secondary Teal (#00A99D), and Light Blue (#78C4E6)\n- **Typography**: Avenir Next with Helvetica Neue fallback, featuring glowing text effects\n- **Layout**: Fullscreen stage projection with HUD elements, mobile-first responsive grid for remote\n- **Interactions**: Touch-friendly controls, real-time phrase triggering, emergency stop functionality\n\n### Database Schema\nThe shared schema defines:\n- Scene management with phrase collections and activation states\n- Phrase state tracking including position, opacity, layer, and animation status\n- WebSocket message types for real-time communication\n- Installation state persistence for volume, active phrases, and connection status\n\n## External Dependencies\n\n### UI and Styling\n- **Radix UI**: Comprehensive primitive components for accessibility and interaction patterns\n- **Tailwind CSS**: Utility-first CSS framework with custom brand configuration\n- **Class Variance Authority**: Type-safe component variant management\n- **Lucide React**: Consistent icon system for interface elements\n\n### Animation and Graphics\n- **tsParticles**: Neural network background particle system with multi-layer support\n- **GSAP**: Professional-grade animation library for phrase movement and transitions (referenced but not yet installed)\n\n### Development Tools\n- **Vite**: Fast development server with Hot Module Replacement\n- **TypeScript**: Type safety across shared interfaces and component props\n- **ESBuild**: Fast bundling for production deployment\n\n### Database and Persistence\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL dialect\n- **Drizzle Kit**: Database migration and schema management\n- **Neon Database**: Serverless PostgreSQL for cloud deployment\n- **Zod**: Runtime schema validation for API contracts\n\n### Backend Services\n- **Express.js**: Web server framework with middleware support\n- **Connect PG Simple**: PostgreSQL session store integration\n- **React Query**: Server state management and caching for remote control\n\n### Form and Data Handling\n- **React Hook Form**: Form state management with validation\n- **Hookform Resolvers**: Integration with Zod for form validation\n- **Date-fns**: Date manipulation for timestamp handling\n\nThe architecture is designed to scale from prototype to production deployment while maintaining the real-time, interactive nature required for a live installation environment.","size_bytes":5634},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"'Avenir Next'\", \"'Helvetica Neue'\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4103},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type InstallationState, type SocketMessage } from \"@shared/schema\";\n\n// Storage interface for the Gador installation\nexport interface IStorage {\n  getInstallationState(): Promise<InstallationState>;\n  updateInstallationState(state: InstallationState): Promise<InstallationState>;\n  addSocketMessage(message: SocketMessage): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private installationState: InstallationState;\n  private messages: SocketMessage[];\n\n  constructor() {\n    this.installationState = {\n      currentScene: 1,\n      activePhrases: [],\n      isConnected: false,\n      volume: 0.8,\n    };\n    this.messages = [];\n  }\n\n  async getInstallationState(): Promise<InstallationState> {\n    return this.installationState;\n  }\n\n  async updateInstallationState(state: InstallationState): Promise<InstallationState> {\n    this.installationState = { ...state };\n    return this.installationState;\n  }\n\n  async addSocketMessage(message: SocketMessage): Promise<void> {\n    this.messages.push(message);\n    // Keep only last 100 messages\n    if (this.messages.length > 100) {\n      this.messages = this.messages.slice(-100);\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1208},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Scene definitions for the Gador installation\nexport const sceneSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  description: z.string(),\n  phrases: z.array(z.string()),\n  isActive: z.boolean().default(false),\n});\n\n// Phrase animation state\nexport const phraseStateSchema = z.object({\n  id: z.string(),\n  text: z.string(),\n  layer: z.enum([\"front\", \"floating\", \"mirror\", \"return\"]),\n  opacity: z.number().min(0).max(1),\n  position: z.object({\n    x: z.number(),\n    y: z.number(),\n    z: z.number().optional(),\n  }),\n  isActive: z.boolean().default(true),\n  sceneId: z.number(),\n});\n\n// WebSocket message types\nexport const socketMessageSchema = z.object({\n  type: z.enum([\"trigger_phrase\", \"change_scene\", \"take_photo\", \"connection_status\", \"scene_update\"]),\n  payload: z.any(),\n  timestamp: z.number(),\n});\n\n// Installation state\nexport const installationStateSchema = z.object({\n  currentScene: z.number(),\n  activePhrases: z.array(phraseStateSchema),\n  isConnected: z.boolean(),\n  volume: z.number().min(0).max(1),\n});\n\nexport type Scene = z.infer<typeof sceneSchema>;\nexport type PhraseState = z.infer<typeof phraseStateSchema>;\nexport type SocketMessage = z.infer<typeof socketMessageSchema>;\nexport type InstallationState = z.infer<typeof installationStateSchema>;\n\n// Scene data as defined in the concept\nexport const SCENES: Scene[] = [\n  {\n    id: 1,\n    name: \"Opening Thoughts\",\n    description: \"First 5 phrases - sequential remote trigger\",\n    phrases: [\n      \"¿Y si me olvido de lo que tengo que decir?\",\n      \"Capaz no es suficiente lo que preparé...\",\n      \"¿Desenchufé la planchita de pelo?\",\n      \"¿Cómo hago para subirlos a todos al barco de Sistema Nervioso Central?\",\n      \"¿Por qué no me habré puesto zapatos más cómodos?\"\n    ],\n    isActive: false,\n  },\n  {\n    id: 2,\n    name: \"Start Scene\",\n    description: \"Start button to begin\",\n    phrases: [],\n    isActive: false,\n  },\n  {\n    id: 3,\n    name: \"Scene 3\",\n    description: \"3 individual phrase buttons\",\n    phrases: [\n      \"Espero que Rocío no me pregunte nada difícil\",\n      \"Necesito ese micrófono… ¿estará en Mercado Libre?\",\n      \"Rocío… ¡te olvidaste de presentarme! Tenemos que anunciar mi nueva posición.\"\n    ],\n    isActive: false,\n  },\n  {\n    id: 4,\n    name: \"Closing Scene\",\n    description: \"4 closing phrases - sequential trigger\",\n    phrases: [\n      \"¡Sí! Juntos podemos, ¡vamos con todo!\",\n      \"¿Nos sacamos una foto todos juntos?\",\n      \"¡Lo vamos a lograr!\",\n      \"¡Qué bueno estar acá con todos!\"\n    ],\n    isActive: false,\n  },\n];\n","size_bytes":2623},"client/src/App.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Switch, Route, Link, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport StageDisplay from \"@/components/StageDisplay\";\nimport RemoteControl from \"@/components/RemoteControl\";\nimport { InstallationState } from \"@shared/schema\";\nimport { Monitor, Smartphone, Sparkles } from 'lucide-react';\nimport NotFound from \"@/pages/not-found\";\n\n// Home page - Unified Control + Display\nfunction Home() {\n  const [installationState, setInstallationState] = useState<InstallationState>({\n    currentScene: 1,\n    activePhrases: [],\n    isConnected: true,\n    volume: 0.8,\n  });\n\n  const handleSceneChange = (sceneId: number) => {\n    setInstallationState(prev => ({ ...prev, currentScene: sceneId }));\n    console.log('Scene changed to:', sceneId);\n  };\n\n  const handlePhraseTriggered = (phraseText: string, sceneId: number) => {\n    console.log('Phrase triggered:', phraseText, 'in scene:', sceneId);\n    setInstallationState(prev => ({\n      ...prev,\n      activePhrases: [...prev.activePhrases]\n    }));\n  };\n\n  const handleVolumeChange = (volume: number) => {\n    setInstallationState(prev => ({ ...prev, volume }));\n    console.log('Volume changed to:', volume);\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <div className=\"w-96 flex-shrink-0 overflow-y-auto\">\n        <RemoteControl \n          installationState={installationState}\n          onSceneChange={handleSceneChange}\n          onPhraseTriggered={handlePhraseTriggered}\n          onVolumeChange={handleVolumeChange}\n        />\n      </div>\n      <div className=\"flex-1\">\n        <StageDisplay \n          installationState={installationState}\n          onStateChange={setInstallationState}\n        />\n      </div>\n    </div>\n  );\n}\n\n// Stage Display Page (for projector)\nfunction StagePage() {\n  const [installationState, setInstallationState] = useState<InstallationState>({\n    currentScene: 1,\n    activePhrases: [],\n    isConnected: true,\n    volume: 0.8,\n  });\n\n  // todo: remove mock functionality - replace with WebSocket connection\n  const handleStateChange = (newState: InstallationState) => {\n    setInstallationState(newState);\n    console.log('Installation state updated:', newState);\n  };\n\n  return (\n    <StageDisplay \n      installationState={installationState}\n      onStateChange={handleStateChange}\n    />\n  );\n}\n\n// Remote Control Page (for mobile)\nfunction RemotePage() {\n  const [installationState, setInstallationState] = useState<InstallationState>({\n    currentScene: 1,\n    activePhrases: [],\n    isConnected: true,\n    volume: 0.8,\n  });\n\n  // todo: remove mock functionality - replace with WebSocket communication\n  const handleSceneChange = (sceneId: number) => {\n    setInstallationState(prev => ({ ...prev, currentScene: sceneId }));\n    console.log('Scene changed to:', sceneId);\n  };\n\n  const handlePhraseTriggered = (phraseText: string, sceneId: number) => {\n    console.log('Phrase triggered:', phraseText, 'in scene:', sceneId);\n    // In real implementation, this would send WebSocket message to stage\n  };\n\n  const handlePhotoTrigger = () => {\n    setInstallationState(prev => ({ ...prev, currentScene: 4 })); // Switch to photo booth scene\n    console.log('Photo session triggered');\n  };\n\n  const handleVolumeChange = (volume: number) => {\n    setInstallationState(prev => ({ ...prev, volume }));\n    console.log('Volume changed to:', volume);\n  };\n\n  return (\n    <RemoteControl \n      installationState={installationState}\n      onSceneChange={handleSceneChange}\n      onPhraseTriggered={handlePhraseTriggered}\n      onPhotoTrigger={handlePhotoTrigger}\n      onVolumeChange={handleVolumeChange}\n    />\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/stage\" component={StagePage} />\n      <Route path=\"/remote\" component={RemotePage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  // Hide cursor on stage display for projector\n  useEffect(() => {\n    const handleLocationChange = () => {\n      if (window.location.pathname === '/stage') {\n        document.body.style.cursor = 'none';\n      } else {\n        document.body.style.cursor = 'auto';\n      }\n    };\n    \n    handleLocationChange();\n    window.addEventListener('popstate', handleLocationChange);\n    \n    return () => {\n      document.body.style.cursor = 'auto';\n      window.removeEventListener('popstate', handleLocationChange);\n    };\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5000},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* WHITE BACKGROUND FOR NOTIFICATIONS - MENTAL HEALTH CAMPAIGN STYLE */\n:root {\n  --bg-white: #FFFFFF;\n  --brand-blue: #0027AF;\n  --brand-teal: #00A99D;\n  --brand-ltblue: #78C4E6;\n  --ink-900: #0F172A;\n  --ink-700: #374151;\n  --ink-500: #6B7280;\n  --hairline: rgba(15,23,42,0.06);\n  --bg-ghost: rgba(15,23,42,0.08);\n}\n\nhtml,\nbody {\n  height: 100%;\n  margin: 0;\n  background: var(--bg-white);\n  overflow: hidden;\n}\n\n/* Hide background elements - white background only */\n#bg-base,\n#bg-formulas,\n#bg-net,\n#bg-pulses {\n  display: none;\n}\n\n/* GADOR SNC 85TH ANNIVERSARY - LIGHT MODE */\n:root {\n  --button-outline: rgba(0, 51, 160, .10);\n  --badge-outline: rgba(0, 51, 160, .08);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8;\n  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0, 169, 157, .06);\n  --elevate-2: rgba(0, 169, 157, .12);\n\n  /* GADOR BRAND COLORS (HSL FORMAT) */\n  /* Primary Blue: #0033A0 = 219 100% 31% */\n  /* Teal: #00A99D = 178 100% 33% */\n  /* Light Blue: #78C4E6 = 199 68% 69% */\n\n  --background: 0 0% 100%;\n  --foreground: 219 100% 15%;\n\n  --border: 219 100% 85%;\n\n  --card: 0 0% 98%;\n  --card-foreground: 219 100% 20%;\n  --card-border: 219 100% 88%;\n\n  --sidebar: 219 100% 95%;\n  --sidebar-foreground: 219 100% 25%;\n  --sidebar-border: 219 100% 85%;\n  --sidebar-primary: 219 100% 31%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 178 100% 88%;\n  --sidebar-accent-foreground: 219 100% 25%;\n  --sidebar-ring: 219 100% 31%;\n\n  --popover: 0 0% 96%;\n  --popover-foreground: 219 100% 20%;\n  --popover-border: 219 100% 82%;\n\n  /* CORE GADOR BRAND TOKENS */\n  --primary: 219 100% 31%;\n  /* Gador Primary Blue */\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 178 100% 85%;\n  /* Teal variant for secondary elements */\n  --secondary-foreground: 219 100% 25%;\n\n  --muted: 219 20% 92%;\n  --muted-foreground: 219 100% 45%;\n\n  --accent: 178 100% 33%;\n  /* Gador Teal */\n  --accent-foreground: 0 0% 100%;\n\n  --tertiary: 199 68% 69%;\n  /* Gador Light Blue */\n  --tertiary-foreground: 219 100% 25%;\n\n  --destructive: 0 84% 35%;\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 219 100% 88%;\n  --ring: 219 100% 31%;\n\n  /* GADOR BRAND CHART COLORS */\n  --chart-1: 219 100% 31%;\n  /* Primary Blue */\n  --chart-2: 178 100% 33%;\n  /* Teal */\n  --chart-3: 199 68% 69%;\n  /* Light Blue */\n  --chart-4: 219 100% 45%;\n  /* Blue variant */\n  --chart-5: 178 100% 45%;\n  /* Teal variant */\n\n  /* TYPOGRAPHY SYSTEM - AVENIR NEXT */\n  --font-display: 'Avenir Next', 'Helvetica Neue', system-ui, sans-serif;\n  --font-sans: 'Avenir Next', 'Helvetica Neue', system-ui, sans-serif;\n\n  /* BRAND COLOR VARIABLES - EXACT from your spec */\n  --blue: #0033A0;\n  --teal: #00A99D;\n  --lblue: #78C4E6;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Menlo', 'Monaco', 'Cascadia Code', monospace;\n\n  /* TEXT HIERARCHY */\n  --text-default: 219 100% 15%;\n  /* Primary text */\n  --text-secondary: 219 100% 35%;\n  /* Secondary text */\n  --text-tertiary: 219 100% 55%;\n  /* Tertiary text */\n  --radius: .5rem;\n  /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(219 20% 20% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(219 20% 20% / 0.03);\n  --shadow-sm: 0px 2px 0px 0px hsl(219 20% 20% / 0.04), 0px 1px 2px -1px hsl(219 20% 20% / 0.06);\n  --shadow: 0px 2px 0px 0px hsl(219 20% 20% / 0.05), 0px 1px 2px -1px hsl(219 20% 20% / 0.08);\n  --shadow-md: 0px 2px 0px 0px hsl(219 20% 20% / 0.06), 0px 2px 4px -1px hsl(219 20% 20% / 0.10);\n  --shadow-lg: 0px 2px 0px 0px hsl(219 20% 20% / 0.08), 0px 4px 6px -1px hsl(219 20% 20% / 0.12);\n  --shadow-xl: 0px 2px 0px 0px hsl(219 20% 20% / 0.10), 0px 8px 10px -1px hsl(219 20% 20% / 0.15);\n  --shadow-2xl: 0px 2px 0px 0px hsl(219 20% 20% / 0.12);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n/* GADOR SNC 85TH ANNIVERSARY - DARK MODE */\n.dark {\n  --button-outline: rgba(0, 169, 157, .15);\n  --badge-outline: rgba(0, 169, 157, .10);\n\n  --opaque-button-border-intensity: 12;\n  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0, 169, 157, .08);\n  --elevate-2: rgba(0, 169, 157, .15);\n\n  --background: 219 100% 4%;\n  /* Deep space blue-black */\n  --foreground: 0 0% 95%;\n  /* Pure white text */\n\n  --border: 219 100% 15%;\n\n  --card: 219 100% 8%;\n  --card-foreground: 0 0% 92%;\n  --card-border: 219 100% 18%;\n\n  --sidebar: 219 100% 6%;\n  --sidebar-foreground: 0 0% 95%;\n  --sidebar-border: 219 100% 20%;\n  --sidebar-primary: 219 100% 45%;\n  /* Brighter blue for dark mode */\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 178 100% 15%;\n  --sidebar-accent-foreground: 0 0% 90%;\n  --sidebar-ring: 219 100% 45%;\n\n  --popover: 219 100% 10%;\n  --popover-foreground: 0 0% 90%;\n  --popover-border: 219 100% 22%;\n\n  /* CORE GADOR BRAND TOKENS - DARK MODE */\n  --primary: 219 100% 45%;\n  /* Brighter blue for dark backgrounds */\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 178 100% 20%;\n  /* Darker teal for secondary elements */\n  --secondary-foreground: 0 0% 90%;\n\n  --muted: 219 100% 12%;\n  --muted-foreground: 219 20% 70%;\n\n  --accent: 178 100% 40%;\n  /* Vibrant teal for dark mode */\n  --accent-foreground: 0 0% 100%;\n\n  --tertiary: 199 68% 75%;\n  /* Brighter light blue for dark mode */\n  --tertiary-foreground: 219 100% 15%;\n\n  --destructive: 0 84% 50%;\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 219 100% 18%;\n  --ring: 219 100% 45%;\n\n  /* GADOR BRAND CHART COLORS - DARK MODE */\n  --chart-1: 219 100% 55%;\n  /* Bright Primary Blue */\n  --chart-2: 178 100% 50%;\n  /* Bright Teal */\n  --chart-3: 199 68% 75%;\n  /* Bright Light Blue */\n  --chart-4: 219 100% 65%;\n  /* Blue variant */\n  --chart-5: 178 100% 60%;\n  /* Teal variant */\n\n  /* TEXT HIERARCHY - DARK MODE */\n  --text-default: 0 0% 95%;\n  /* Primary white text */\n  --text-secondary: 0 0% 75%;\n  /* Secondary gray text */\n  --text-tertiary: 0 0% 55%;\n  /* Tertiary muted text */\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.25), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.30), 0px 1px 2px -1px hsl(0 0% 0% / 0.35);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.35), 0px 2px 4px -1px hsl(0 0% 0% / 0.40);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.40), 0px 4px 6px -1px hsl(0 0% 0% / 0.45);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.45), 0px 8px 10px -1px hsl(0 0% 0% / 0.50);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply antialiased bg-background text-foreground;\n    font-family: var(--font-display);\n  }\n\n  /* GADOR TYPOGRAPHY SCALE */\n  .text-display {\n    font-family: var(--font-display);\n    font-weight: 700;\n    font-size: 4rem;\n    line-height: 1.1;\n    letter-spacing: -0.02em;\n  }\n\n  .text-heading-1 {\n    font-family: var(--font-display);\n    font-weight: 600;\n    font-size: 3rem;\n    line-height: 1.2;\n    letter-spacing: -0.02em;\n  }\n\n  .text-heading-2 {\n    font-family: var(--font-display);\n    font-weight: 600;\n    font-size: 2.25rem;\n    line-height: 1.3;\n    letter-spacing: -0.01em;\n  }\n\n  .text-body-large {\n    font-family: var(--font-display);\n    font-weight: 500;\n    font-size: 1.125rem;\n    line-height: 1.6;\n  }\n\n  .text-body {\n    font-family: var(--font-display);\n    font-weight: 400;\n    font-size: 1rem;\n    line-height: 1.6;\n  }\n\n  .text-body-small {\n    font-family: var(--font-display);\n    font-weight: 400;\n    font-size: 0.875rem;\n    line-height: 1.5;\n  }\n\n  /* GADOR TEXT HIERARCHY COLORS */\n  .text-default {\n    color: hsl(var(--text-default));\n  }\n\n  .text-secondary {\n    color: hsl(var(--text-secondary));\n  }\n\n  .text-tertiary {\n    color: hsl(var(--text-tertiary));\n  }\n\n  /* GLOW EFFECTS FOR NEURAL INTERFACE */\n  .text-glow-primary {\n    text-shadow:\n      0 0 10px hsl(var(--primary) / 0.5),\n      0 0 20px hsl(var(--primary) / 0.3),\n      0 0 30px hsl(var(--primary) / 0.2);\n  }\n\n  .text-glow-accent {\n    text-shadow:\n      0 0 10px hsl(var(--accent) / 0.6),\n      0 0 20px hsl(var(--accent) / 0.4),\n      0 0 30px hsl(var(--accent) / 0.2);\n  }\n\n  .text-glow-tertiary {\n    text-shadow:\n      0 0 8px hsl(var(--tertiary) / 0.5),\n      0 0 16px hsl(var(--tertiary) / 0.3),\n      0 0 24px hsl(var(--tertiary) / 0.2);\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n\n/* ===== GADOR 85TH ANNIVERSARY - STAGE DISPLAY FIXES ===== */\n\n/* SAFE AREA + CENTER POSITIONING - EXACT from your spec */\n#stage,\n#phrases-layer {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n#phrases-layer {\n  padding: 7% 10%;\n  /* action/title safe area */\n  overflow: hidden;\n}\n\n/* PHRASE TYPOGRAPHY RESET - EXACT from your spec */\n.phrase {\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  /* CENTER START - exactly as specified */\n  white-space: nowrap;\n  font-weight: 700;\n  letter-spacing: .2px;\n  color: #fff;\n  filter: none;\n  /* eliminates blur - EXACT from spec */\n}\n\n/* HUD CONTAINER - EXACT from your spec (not chat-bubble) */\n.phrase.hud {\n  padding: 14px 20px;\n  border-radius: 14px;\n  border: 2px solid rgba(0, 169, 157, .65);\n  /* borde teal */\n  background: rgba(0, 51, 160, .18);\n  /* relleno azul translúcido */\n  backdrop-filter: blur(6px);\n  /* sutil */\n  text-shadow: 0 0 10px rgba(0, 169, 157, .8), 0 0 18px rgba(120, 196, 230, .6);\n}\n\n/* ===== CRITICAL FIXES - DEEP SPACE NEURAL NETWORK ===== */\n\n/* 1. DEEP SPACE BACKGROUND - EXACT from user spec */\nhtml,\nbody {\n  height: 100% !important;\n  margin: 0 !important;\n  background: #020814 !important;\n  /* Deep Space - EXACT from spec */\n}\n\n/* 2. PARTICLE LAYERS - EXACT transparency from spec */\n#bg-net,\n#bg-pulses {\n  position: fixed !important;\n  inset: 0 !important;\n  background: transparent !important;\n  /* NOT white - EXACT from spec */\n}\n\n/* 3. PARTICLE GLOW REDUCTION - EXACT from spec */\n#bg-pulses canvas {\n  filter: drop-shadow(0 0 8px rgba(125, 249, 255, .45)) !important;\n}\n\n/* 4. STAGE - EXACT 100vh from spec */\n#stage {\n  position: relative !important;\n  width: 100% !important;\n  height: 100vh !important;\n  overflow: hidden !important;\n}\n\n/* 5. PHRASES LAYER - EXACT safe area from spec */\n#phrases-layer {\n  position: absolute !important;\n  inset: 0 !important;\n  padding: 7% 10% !important;\n  /* safe area - EXACT from spec */\n}\n\n/* 6. HIDE DEBUG BADGES - EXACT from spec */\n#fps,\n#dpr,\n.debug-badge {\n  display: none !important;\n}\n\n/* 7. DEEP SPACE BASE WITH VIGNETTE - EXACT from spec */\n#bg-base {\n  position: fixed !important;\n  inset: 0 !important;\n  z-index: -3 !important;\n  background:\n    radial-gradient(55% 55% at 50% 50%, rgba(0, 0, 0, 0) 0%, #020814 75%),\n    #020814 !important;\n}\n\n/* OPACITY LAYERS - EXACT from your spec */\n.layer-front {\n  opacity: 1.0;\n  transform: translateX(-50%) scale(1);\n  color: #fff;\n}\n\n.layer-float {\n  opacity: .8;\n}\n\n.layer-back {\n  opacity: .35;\n  transform: translateX(-50%) scale(.85);\n  color: #78C4E6;\n}\n\n.layer-return {\n  opacity: .65;\n  transform: translateX(-50%) scale(.80);\n  color: #fff;\n}\n\n/* glow for the pulses canvas only (NOT the text) */\n#bg-pulses canvas {\n  filter: drop-shadow(0 0 10px rgba(125, 249, 255, .55)) drop-shadow(0 0 18px rgba(125, 249, 255, .35));\n}","size_bytes":16699},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ConnectionStatus.tsx":{"content":"import { Badge } from '@/components/ui/badge';\nimport { Wifi, WifiOff } from 'lucide-react';\n\ninterface ConnectionStatusProps {\n  isConnected: boolean;\n  latency?: number;\n}\n\nexport default function ConnectionStatus({ isConnected, latency }: ConnectionStatusProps) {\n  return (\n    <div className=\"flex items-center gap-2\" data-testid=\"connection-status\">\n      <Badge \n        variant=\"outline\"\n        className={`flex items-center gap-1.5 px-2 py-1 ${\n          isConnected \n            ? 'border-green-400 text-green-300 bg-green-900/20' \n            : 'border-red-400 text-red-300 bg-red-900/20'\n        }`}\n      >\n        {isConnected ? (\n          <Wifi className=\"w-3 h-3\" />\n        ) : (\n          <WifiOff className=\"w-3 h-3\" />\n        )}\n        <span className=\"text-xs font-medium\">\n          {isConnected ? 'Connected' : 'Disconnected'}\n        </span>\n        {isConnected && latency && (\n          <span className=\"text-xs opacity-75\">\n            {latency}ms\n          </span>\n        )}\n      </Badge>\n    </div>\n  );\n}","size_bytes":1040},"client/src/components/FloatingPhrase.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\nimport { PhraseState } from '@shared/schema';\nimport { MessageCircle, Zap, Bell, Brain, MessageSquare, Smartphone, Mail, Phone, Calendar, Camera, Music, Heart, AlertCircle, BatteryLow, Wifi, Volume2 } from 'lucide-react';\n\ninterface FloatingPhraseProps {\n  phrase: PhraseState;\n  onAnimationComplete?: () => void;\n  lane?: 'A' | 'B' | 'C' | 'D';\n  entryStyle?: 'draw' | 'focus' | 'flash' | 'mask';\n  stackIndex?: number;\n}\n\n/**\n * GADOR MENTAL HEALTH CAMPAIGN - NOTIFICATION TOAST\n * iOS-style notification cards on white background\n * Simple entrance animations - NO crazy orbital effects\n */\n\n// COLORES OFICIALES DE LA CAMPAÑA GADOR - ESPECIFICACIÓN EXACTA\nconst VARIANT_STYLES = {\n  blue: {\n    bg: '#37479d',\n    textColor: '#ffffff',\n    metaColor: 'rgba(255,255,255,0.8)',\n    opacity: 0.9,\n    borderRadius: '12px', // Mensajes complejos\n  },\n  lightGrayLarge: {\n    bg: '#a8a8a8',\n    textColor: '#262322',\n    metaColor: '#262322',\n    opacity: 1,\n    borderRadius: '16px', // Notificaciones de sistema - efecto 3D\n  },\n  lightGraySmall: {\n    bg: '#f2f3f7',\n    textColor: '#0b1825',\n    metaColor: '#0b1825',\n    opacity: 0.9,\n    borderRadius: '10px', // Rectángulo con esquinas redondeadas\n  },\n  darkGray: {\n    bg: '#434f5d',\n    textColor: '#c0c0c0',\n    metaColor: '#a0a0a0',\n    opacity: 1,\n    borderRadius: '8px', // Menciones - esquinas suaves\n  }\n};\n\n// Icon configurations with specific colors - VARIED APPS\nconst ICON_OPTIONS = [\n  { icon: MessageCircle, color: '#FFFFFF', bg: '#25D366', label: 'WhatsApp' }, // WhatsApp green\n  { icon: Mail, color: '#FFFFFF', bg: '#EA4335', label: 'Gmail' }, // Gmail red\n  { icon: Camera, color: '#FFFFFF', bg: '#E1306C', label: 'Instagram' }, // Instagram pink\n  { icon: Phone, color: '#FFFFFF', bg: '#007AFF', label: 'Teléfono' }, // Phone blue\n  { icon: MessageSquare, color: '#1C1C1C', bg: '#FFCC00', label: 'Mensaje' }, // SMS yellow\n  { icon: Calendar, color: '#FFFFFF', bg: '#FF3B30', label: 'Calendario' }, // Calendar red\n  { icon: Music, color: '#FFFFFF', bg: '#1DB954', label: 'Spotify' }, // Spotify green\n  { icon: Bell, color: '#FFFFFF', bg: '#5856D6', label: 'Notificación' }, // Purple notification\n  { icon: Heart, color: '#FFFFFF', bg: '#FF2D55', label: 'Salud' }, // Health pink\n  { icon: AlertCircle, color: '#1C1C1C', bg: '#FFCC00', label: 'Alerta' }, // Alert yellow\n  { icon: BatteryLow, color: '#FFFFFF', bg: '#FF3B30', label: 'Batería' }, // Battery red\n  { icon: Wifi, color: '#FFFFFF', bg: '#007AFF', label: 'WiFi' }, // WiFi blue\n];\n\nexport default function FloatingPhrase({ \n  phrase, \n  onAnimationComplete,\n  lane = 'B',\n  entryStyle = 'focus',\n  stackIndex = 0\n}: FloatingPhraseProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const masterTimeline = useRef<gsap.core.Timeline | null>(null);\n\n  useEffect(() => {\n    if (containerRef.current) {\n      initializeAnimation();\n    }\n    \n    return () => {\n      if (masterTimeline.current) {\n        masterTimeline.current.kill();\n      }\n    };\n  }, [phrase.id]);\n\n  const initializeAnimation = () => {\n    const el = containerRef.current;\n    if (!el) return;\n\n    // CHAOTIC POSITIONING: Allow overlap, tight stacking, claustrophobia\n    // Wider range but with percentage-based positioning to keep content visible\n    const randomX = gsap.utils.random(15, 85); \n    const randomY = gsap.utils.random(15, 85); \n    const rotation = gsap.utils.random(-15, 15); // MÁS VARIACIÓN EN INCLINACIÓN\n    \n    // Get the target opacity from data attribute or default to 1\n    const targetOpacity = parseFloat(el.style.opacity || '1');\n    \n    // Position with percentages and translate to keep within bounds\n    gsap.set(el, { \n      position: 'absolute',\n      left: `${randomX}%`,\n      top: `${randomY}%`,\n      transform: `translate(-50%, -50%)`,\n      opacity: 0, \n      scale: 0.7, // Más pequeña al inicio para entrada más dramática\n      rotate: rotation,\n      transformOrigin: \"50% 50%\",\n      maxWidth: '40vw',\n    });\n    \n    const tl = gsap.timeline({\n      onComplete: () => {\n        if (onAnimationComplete) {\n          onAnimationComplete();\n          console.log(`🗑️ Removed completed phrase: \"${phrase.text}\"`);\n        }\n      }\n    });\n    \n    // ENTRADA MÁS RÁPIDA Y DINÁMICA\n    const delay = (stackIndex || 0) * 0.15; // Menos delay entre notificaciones\n    \n    tl.to(el, { \n      opacity: targetOpacity, // Fade to the variant's target opacity\n      scale: 1, \n      duration: 0.3,\n      ease: \"back.out(1.7)\", // Más bounce\n      delay: delay\n    });\n    \n    // Floating infinito - NUNCA TERMINA\n    tl.to(el, { \n      y: `+=${gsap.utils.random(-12, 12)}`,\n      x: `+=${gsap.utils.random(-10, 10)}`,\n      duration: 2,\n      yoyo: true, \n      repeat: -1, // INFINITO - nunca termina\n      ease: \"sine.inOut\" \n    }, \"+=0.1\");\n    \n    // Rotación infinita\n    tl.to(el, { \n      rotate: `+=${gsap.utils.random(-8, 8)}`,\n      duration: 2.5, \n      yoyo: true, \n      repeat: -1, // INFINITO - nunca termina\n      ease: \"sine.inOut\" \n    }, \"<\");\n\n    // NO EXIT ANIMATION - las notificaciones NUNCA desaparecen\n\n    masterTimeline.current = tl;\n  };\n\n  // Hash function based on phrase ID for truly unique random per instance\n  const getHash = (str: string) => {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n    return Math.abs(hash);\n  };\n\n  const phraseHash = getHash(phrase.id); // Use ID instead of text for randomness\n  \n  // TAMAÑOS VARIADOS - determinar primero\n  const sizeVariant = phraseHash % 3;\n  \n  // Colores oficiales Gador - asignar según tamaño\n  const colorOptions = sizeVariant === 0 \n    ? ['lightGraySmall', 'blue', 'darkGray'] // Pequeños usan gris claro chico\n    : sizeVariant === 2 \n    ? ['lightGrayLarge', 'blue', 'darkGray'] // Grandes usan gris claro grande\n    : ['blue', 'darkGray', 'lightGraySmall', 'lightGrayLarge']; // Medianos pueden usar cualquiera\n  \n  const variantIndex = Math.floor((phraseHash / 3)) % colorOptions.length;\n  const variant = colorOptions[variantIndex] as keyof typeof VARIANT_STYLES;\n  const styles = VARIANT_STYLES[variant];\n  \n  // ALL notifications have icons - 100%\n  const showIcon = true; // ALWAYS show icon\n  const iconConfig = ICON_OPTIONS[phraseHash % ICON_OPTIONS.length];\n  const IconComponent = iconConfig.icon;\n  \n  // Random shadow depth per instance\n  const useSoftShadow = (phraseHash % 2) === 0;\n  const shadow = useSoftShadow \n    ? '0 8px 20px rgba(0,0,0,0.08), 0 2px 6px rgba(0,0,0,0.04)' // soft - background noise\n    : '0 20px 50px rgba(0,0,0,0.25), 0 8px 16px rgba(0,0,0,0.15)'; // strong - intrusive foreground\n  \n  // Generate meta time - MÁS VARIEDAD\n  const metas = [\n    'ahora', \n    'hace 1 min', \n    'hace 2 min', \n    'hace 5 min',\n    'hace 15 min',\n    'lun 9:21', \n    'mar 14:33',\n    'mié 11:05',\n    'jue 16:42',\n    'vie 8:17',\n    'sáb 13:29',\n    'dom 10:44',\n    '7:30',\n    '12:15',\n    '18:22',\n    '21:08'\n  ];\n  const meta = metas[phraseHash % metas.length];\n\n  // TAMAÑOS VARIADOS - 25% más chicos\n  const sizes = {\n    small: {\n      padding: '14px 17px',\n      gap: '11px',\n      iconSize: 27,\n      iconContainerSize: 43,\n      metaFontSize: 'clamp(11px, 1.2vw, 13px)',\n      textFontSize: 'clamp(16px, 2vw, 20px)',\n      minWidth: 'min(293px, 65vw)',\n      maxWidth: 'min(506px, 78vw)',\n      fontWeight: 400,\n    },\n    medium: {\n      padding: '20px 26px',\n      gap: '16px',\n      iconSize: 34,\n      iconContainerSize: 54,\n      metaFontSize: 'clamp(13px, 1.5vw, 16px)',\n      textFontSize: 'clamp(20px, 2.55vw, 27px)',\n      minWidth: 'min(420px, 73vw)',\n      maxWidth: 'min(630px, 85vw)',\n      fontWeight: 600,\n    },\n    large: {\n      padding: '27px 36px',\n      gap: '20px',\n      iconSize: 41,\n      iconContainerSize: 65,\n      metaFontSize: 'clamp(14px, 1.7vw, 20px)',\n      textFontSize: 'clamp(26px, 3.2vw, 36px)',\n      minWidth: 'min(551px, 80vw)',\n      maxWidth: 'min(799px, 90vw)',\n      fontWeight: 700,\n    }\n  };\n  \n  const currentSize = sizeVariant === 0 ? sizes.small : sizeVariant === 1 ? sizes.medium : sizes.large;\n\n  return (\n    <div \n      ref={containerRef}\n      className=\"pointer-events-none select-none\"\n      style={{\n        position: 'absolute',\n        display: 'flex',\n        gap: showIcon ? currentSize.gap : '0px',\n        alignItems: 'flex-start',\n        borderRadius: styles.borderRadius,\n        padding: currentSize.padding,\n        border: 'none',\n        boxShadow: shadow,\n        backgroundColor: styles.bg,\n        opacity: styles.opacity,\n        willChange: 'transform, opacity',\n        minWidth: currentSize.minWidth,\n        maxWidth: currentSize.maxWidth,\n        width: 'auto',\n      }}\n      data-testid={`floating-phrase-${phrase.id}`}\n    >\n      {/* Icon - tamaño variado */}\n      {showIcon && (\n        <div \n          style={{\n            width: `${currentSize.iconContainerSize}px`,\n            height: `${currentSize.iconContainerSize}px`,\n            borderRadius: '50%',\n            display: 'grid',\n            placeItems: 'center',\n            flexShrink: 0,\n            backgroundColor: iconConfig.bg,\n            color: iconConfig.color,\n            boxShadow: '0 3px 10px rgba(0,0,0,0.12)',\n          }}\n          aria-hidden=\"true\"\n        >\n          <IconComponent size={currentSize.iconSize} strokeWidth={2.5} />\n        </div>\n      )}\n      \n      {/* Body */}\n      <div style={{ flex: 1, minWidth: 0, overflow: 'hidden' }}>\n        {/* System label/timestamp - tamaño variado */}\n        <div \n          style={{\n            fontFamily: '\"Avenir Next\", Helvetica, sans-serif',\n            fontWeight: 400,\n            fontSize: currentSize.metaFontSize,\n            lineHeight: 1.4,\n            color: styles.metaColor,\n            letterSpacing: '0.2px',\n            marginBottom: '4px',\n          }}\n        >\n          {meta}\n        </div>\n        \n        {/* Main intrusive thought - tamaño y peso variado */}\n        <div \n          style={{\n            fontFamily: '\"Avenir Next\", Helvetica, sans-serif',\n            fontWeight: currentSize.fontWeight,\n            fontSize: currentSize.textFontSize,\n            lineHeight: 1.25,\n            color: styles.textColor,\n            wordBreak: 'break-word',\n            overflowWrap: 'break-word',\n          }}\n        >\n          {phrase.text}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10560},"client/src/components/NeuralBackground.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\ndeclare global {\n  interface Window {\n    tsParticles: any;\n    bgBurst: (ms?: number) => void;\n  }\n}\n\ninterface NeuralBackgroundProps {\n  intensity?: number;\n  particleCount?: number;\n  connectionDistance?: number;\n  pulseActive?: boolean;\n}\n\n/**\n * DIGITAL ANXIETY BACKGROUND - EXACT FROM USER SPECIFICATION\n * Layer stack: Base + Ghost Formulas + Neural NET + Pulses\n */\nexport default function NeuralBackground({\n  intensity = 0.7,\n  particleCount = 120,\n  connectionDistance = 180,\n  pulseActive = false,\n}: NeuralBackgroundProps) {\n  const formulasRef = useRef<HTMLCanvasElement>(null);\n  const initializedRef = useRef(false);\n\n  useEffect(() => {\n    if (initializedRef.current) return;\n\n    const initDigitalAnxietyBackground = () => {\n      const CYAN = \"#7DF9FF\";\n\n      console.log(\n        \"🔍 Checking tsParticles availability:\",\n        !!window.tsParticles,\n      );\n\n      // LAYER 2: Neural NET (nodes + links) - EXACT from user spec\n      if (window.tsParticles) {\n        console.log(\"✅ tsParticles found, initializing neural network...\");\n        window.tsParticles.load(\"bg-net\", {\n          fullScreen: { enable: false },\n          background: { color: \"transparent\" },\n          fpsLimit: 60,\n          detectRetina: true,\n          particles: {\n            number: { value: 120, density: { enable: true, area: 1200 } },\n            color: { value: CYAN },\n            shape: { type: \"circle\" },\n            size: { value: 2, random: { enable: true, minimumValue: 1 } },\n            opacity: {\n              value: 0.4,\n              animation: {\n                enable: true,\n                speed: 0.3,\n                minimumValue: 0.25,\n                sync: false,\n              },\n            },\n            move: {\n              enable: true,\n              speed: 0.35,\n              random: true,\n              outModes: { default: \"bounce\" },\n            },\n            links: {\n              enable: true,\n              distance: 140,\n              color: CYAN,\n              opacity: 0.3,\n              width: 1.05,\n            },\n          },\n        });\n\n        // LAYER 3: Pulses (energy blips + reactive burst) - EXACT from user spec\n        window.tsParticles.load(\"bg-pulses\", {\n          fullScreen: { enable: false }, // <- stay inside your div\n          background: { color: \"transparent\" }, // <- never white\n          fpsLimit: 60,\n          detectRetina: true,\n          particles: {\n            number: { value: 18, density: { enable: true, area: 1000 } },\n            color: { value: CYAN },\n            shape: { type: \"circle\" },\n\n            // bright dots with slight size variance\n            size: { value: { min: 1.5, max: 3.5 } },\n\n            // strong but alive\n            opacity: {\n              value: 0.95,\n              animation: {\n                enable: true,\n                speed: 1.2,\n                minimumValue: 0.5,\n                sync: false,\n              },\n            },\n\n            // motion = gentle drift + short trail to feel like energy\n            move: {\n              enable: true,\n              speed: 1.4,\n              random: true,\n              straight: false,\n              angle: { offset: 0, value: { min: -20, max: 20 } },\n              outModes: { default: \"bounce\" },\n\n              // <<< add a subtle streak behind each particle\n              trail: {\n                enable: true,\n                length: 8, // 6–12 works well\n                fillColor: \"#020814\", // Deep Space base to “erase” as it trails\n              },\n            },\n\n            links: { enable: false },\n            reduceDuplicates: true,\n          },\n        });\n\n        // BURST FUNCTION - EXACT from user spec\n        window.bgBurst = (ms = 900) => {\n          const pulses = window.tsParticles.domItem(1); // second instance\n          if (!pulses) return;\n          const prev = pulses.actualOptions.particles.move.speed;\n          pulses.options.particles.move.speed = 2.8;\n          pulses.refresh();\n          setTimeout(() => {\n            pulses.options.particles.move.speed = prev;\n            pulses.refresh();\n          }, ms);\n        };\n\n        console.log(\n          \"🎆 Neural network and pulse system initialized successfully!\",\n        );\n      } else {\n        console.error(\n          \"❌ tsParticles not found! Scripts may not have loaded yet.\",\n        );\n        return false;\n      }\n\n      // LAYER 1: Ghost formulas (canvas) - EXACT from user spec\n      const cv = formulasRef.current;\n      if (cv) {\n        const ctx = cv.getContext(\"2d\");\n        if (!ctx) return;\n\n        const fit = () => {\n          cv.width = window.innerWidth;\n          cv.height = window.innerHeight;\n        };\n        fit();\n        window.addEventListener(\"resize\", fit);\n\n        const glyphs = [\n          // Math / cognitive base\n          \"x\",\n          \"y\",\n          \"∑\",\n          \"≈\",\n          \"→\",\n          \"∂\",\n          \"α\",\n          \"β\",\n          \"γ\",\n          \"π\",\n          \"Δ\",\n          \"θ\",\n          \"ln\",\n          \"ƒ\",\n          // SNC / neuro context\n          \"SNC\",\n          \"neurona\",\n          \"sinapsis\",\n          \"dopamina\",\n          \"axón\",\n          \"glía\",\n          // Pharma / Gador context\n          \"Gador\",\n          \"medicina\",\n          \"ciencia\",\n          \"innovación\",\n          \"tratamiento\",\n          \"molécula\",\n        ];\n        const items = Array.from({ length: 60 }).map(() => ({\n          x: Math.random() * cv.width,\n          y: Math.random() * cv.height,\n          s: 0.8 + Math.random() * 1.4, // scale\n          v: 0.12 + Math.random() * 0.22, // vertical drift\n          a: Math.random() * Math.PI * 2, // small lateral sway\n          w: 0.15 + Math.random() * 0.25, // sway speed\n          g: glyphs[(Math.random() * glyphs.length) | 0],\n        }));\n\n        const tick = () => {\n          if (!ctx || !cv) return;\n          ctx.clearRect(0, 0, cv.width, cv.height);\n          ctx.fillStyle = \"rgba(255,255,255,0.15)\"; // 15% white\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n\n          items.forEach((it) => {\n            it.y += it.v;\n            if (it.y > cv.height + 20) it.y = -20;\n            it.a += it.w * 0.016;\n            const x = it.x + Math.sin(it.a) * 8; // gentle sway\n            ctx.save();\n            ctx.globalAlpha = 0.15;\n            ctx.translate(x, it.y);\n            ctx.scale(it.s, it.s);\n            ctx.font = \"16px Helvetica, Arial, sans-serif\";\n            ctx.fillText(it.g, 0, 0);\n            ctx.restore();\n          });\n          requestAnimationFrame(tick);\n        };\n        tick();\n      }\n\n      initializedRef.current = true;\n    };\n\n    // AGGRESSIVE RETRY MECHANISM - Wait for tsParticles to load\n    let retryCount = 0;\n    const maxRetries = 10;\n\n    const tryInit = () => {\n      console.log(\n        `🔄 Attempt ${retryCount + 1}/${maxRetries} to initialize tsParticles...`,\n      );\n\n      if (window.tsParticles) {\n        const success = initDigitalAnxietyBackground();\n        if (success !== false) {\n          console.log(\"🎯 Background initialization successful!\");\n          return;\n        }\n      }\n\n      retryCount++;\n      if (retryCount < maxRetries) {\n        console.log(\n          `⏳ tsParticles not ready, retrying in ${retryCount * 500}ms...`,\n        );\n        setTimeout(tryInit, retryCount * 500);\n      } else {\n        console.error(\"💥 FAILED: tsParticles never loaded after 10 attempts!\");\n        console.error(\n          \"Check if scripts are blocked or failed to load from CDN.\",\n        );\n      }\n    };\n\n    tryInit();\n  }, []);\n\n  return (\n    <>\n      {/* Layer 0: Base + vignette - EXACT from user spec */}\n      <div\n        id=\"bg-base\"\n        className=\"fixed inset-0 pointer-events-none\"\n        style={{ zIndex: -4 }}\n      />\n\n      {/* Layer 1: Ghost formulas - EXACT from user spec */}\n      <canvas\n        id=\"bg-formulas\"\n        ref={formulasRef}\n        className=\"fixed inset-0 pointer-events-none\"\n        style={{ zIndex: -3 }}\n      />\n\n      {/* Layer 2: Neural NET - EXACT from user spec */}\n      <div\n        id=\"bg-net\"\n        className=\"fixed inset-0 pointer-events-none\"\n        style={{ zIndex: -2, background: \"transparent\" }}\n      />\n\n      {/* Layer 3: Pulses - EXACT from user spec */}\n      <div\n        id=\"bg-pulses\"\n        className=\"fixed inset-0 pointer-events-none\"\n        style={{ zIndex: -1, background: \"transparent\" }}\n      />\n    </>\n  );\n}\n\n// Burst controller available via window.bgBurst\n","size_bytes":8593},"client/src/components/PhotoBooth.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Camera, X, Download } from 'lucide-react';\n\ninterface PhotoBoothProps {\n  onComplete?: () => void;\n  onCancel?: () => void;\n}\n\nexport default function PhotoBooth({ onComplete, onCancel }: PhotoBoothProps) {\n  const [isActive, setIsActive] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  const [isCounting, setIsCounting] = useState(false);\n  const [photoTaken, setPhotoTaken] = useState(false);\n  const [photoUrl, setPhotoUrl] = useState<string | null>(null);\n  const [hasPermission, setHasPermission] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n\n  useEffect(() => {\n    requestCameraPermission();\n    return () => {\n      stopCamera();\n    };\n  }, []);\n\n  const requestCameraPermission = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: { width: 1920, height: 1080 }, \n        audio: false \n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        streamRef.current = stream;\n        setHasPermission(true);\n        setIsActive(true);\n      }\n    } catch (err) {\n      setError('Camera access denied. Please allow camera access and try again.');\n      console.error('Camera error:', err);\n    }\n  };\n\n  const stopCamera = () => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    setIsActive(false);\n  };\n\n  const startCountdown = () => {\n    setIsCounting(true);\n    setCountdown(10);\n    \n    const timer = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          setIsCounting(false);\n          takePhoto();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const takePhoto = () => {\n    if (!videoRef.current || !canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    if (!ctx) return;\n    \n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    \n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    \n    const url = canvas.toDataURL('image/jpeg', 0.95);\n    setPhotoUrl(url);\n    setPhotoTaken(true);\n    \n    // Auto-download the photo\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `gador_anniversary_photo_${Date.now()}.jpg`;\n    link.click();\n    \n    console.log('Photo captured and downloaded');\n  };\n\n  const handleComplete = () => {\n    stopCamera();\n    onComplete?.();\n  };\n\n  const handleCancel = () => {\n    stopCamera();\n    onCancel?.();\n  };\n\n  if (error) {\n    return (\n      <div className=\"fixed inset-0 bg-black/90 backdrop-blur-sm z-50 flex items-center justify-center\">\n        <div className=\"bg-red-900/20 border border-red-500 rounded-lg p-8 max-w-md mx-4\">\n          <h3 className=\"text-red-300 text-xl font-semibold mb-4\">Camera Error</h3>\n          <p className=\"text-red-200 mb-6\">{error}</p>\n          <Button variant=\"outline\" onClick={handleCancel} data-testid=\"button-cancel-photo\">\n            <X className=\"w-4 h-4 mr-2\" />\n            Close\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black z-50\" data-testid=\"photo-booth\">\n      {/* Video preview */}\n      {isActive && (\n        <video\n          ref={videoRef}\n          autoPlay\n          playsInline\n          muted\n          className=\"w-full h-full object-cover\"\n        />\n      )}\n      \n      {/* Hidden canvas for photo capture */}\n      <canvas ref={canvasRef} className=\"hidden\" />\n      \n      {/* Countdown overlay */}\n      {isCounting && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-black/50\">\n          <div className=\"text-center\">\n            <div \n              className=\"text-9xl font-bold text-white mb-4 animate-pulse\"\n              style={{\n                textShadow: '0 0 50px hsl(178, 100%, 33%), 0 0 100px hsl(178, 100%, 33%)',\n                color: 'hsl(178, 100%, 33%)'\n              }}\n            >\n              {countdown}\n            </div>\n            <p className=\"text-white text-2xl font-semibold\">Get ready...</p>\n          </div>\n        </div>\n      )}\n      \n      {/* Photo taken overlay */}\n      {photoTaken && photoUrl && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-black/80\">\n          <div className=\"text-center\">\n            <div className=\"mb-6\">\n              <img \n                src={photoUrl} \n                alt=\"Captured photo\" \n                className=\"max-w-md max-h-80 object-contain border-4 border-teal-400 rounded-lg shadow-2xl\"\n              />\n            </div>\n            <div className=\"flex gap-4 justify-center\">\n              <Button \n                variant=\"default\"\n                onClick={handleComplete}\n                data-testid=\"button-complete-photo\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Photo Saved!\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Controls */}\n      {isActive && !isCounting && !photoTaken && (\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n          <div className=\"flex gap-4\">\n            <Button \n              size=\"lg\"\n              onClick={startCountdown}\n              className=\"px-8 py-4 text-lg\"\n              data-testid=\"button-start-countdown\"\n            >\n              <Camera className=\"w-6 h-6 mr-3\" />\n              Take Photo\n            </Button>\n            <Button \n              variant=\"outline\"\n              size=\"lg\"\n              onClick={handleCancel}\n              className=\"px-8 py-4 text-lg\"\n              data-testid=\"button-cancel-photo\"\n            >\n              <X className=\"w-6 h-6 mr-3\" />\n              Cancel\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6294},"client/src/components/RemoteControl.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Slider } from '@/components/ui/slider';\nimport { Progress } from '@/components/ui/progress';\nimport SceneSelector from './SceneSelector';\nimport ConnectionStatus from './ConnectionStatus';\nimport { InstallationState, SCENES } from '@shared/schema';\nimport { Volume2, VolumeX, Play, Square } from 'lucide-react';\n\ninterface RemoteControlProps {\n  installationState: InstallationState;\n  onSceneChange?: (sceneId: number) => void;\n  onPhraseTriggered?: (phraseText: string, sceneId: number) => void;\n  onPhotoTrigger?: () => void;\n  onVolumeChange?: (volume: number) => void;\n}\n\nexport default function RemoteControl({\n  installationState,\n  onSceneChange,\n  onPhraseTriggered,\n  onPhotoTrigger,\n  onVolumeChange\n}: RemoteControlProps) {\n  const [isMuted, setIsMuted] = useState(false);\n  const [selectedPhrase, setSelectedPhrase] = useState<string | null>(null);\n  const [lastTriggerTime, setLastTriggerTime] = useState(0);\n  const [cooldownProgress, setCooldownProgress] = useState(0);\n  const [volume, setVolume] = useState(installationState.volume * 100);\n  const [hapticFeedback, setHapticFeedback] = useState(false);\n  const [scene1Index, setScene1Index] = useState(0);\n  const [scene4Index, setScene4Index] = useState(0);\n\n  // Cooldown management (2 seconds for manual triggers)\n  const COOLDOWN_DURATION = 2000;\n  \n  // Reset sequential indices when scene changes\n  useEffect(() => {\n    setScene1Index(0);\n    setScene4Index(0);\n  }, [installationState.currentScene]);\n  \n  useEffect(() => {\n    if (lastTriggerTime > 0) {\n      const interval = setInterval(() => {\n        const elapsed = Date.now() - lastTriggerTime;\n        const progress = Math.min((elapsed / COOLDOWN_DURATION) * 100, 100);\n        setCooldownProgress(progress);\n        \n        if (progress >= 100) {\n          clearInterval(interval);\n          setCooldownProgress(0);\n        }\n      }, 50);\n      \n      return () => clearInterval(interval);\n    }\n  }, [lastTriggerTime]);\n\n\n  // Haptic feedback simulation (for mobile devices)\n  const triggerHaptic = () => {\n    setHapticFeedback(true);\n    if (navigator.vibrate) {\n      navigator.vibrate([50, 30, 50]); // Pattern: vibrate, pause, vibrate\n    }\n    setTimeout(() => setHapticFeedback(false), 200);\n  };\n\n  const currentScene = SCENES.find(s => s.id === installationState.currentScene);\n\n  const handlePhraseSelect = (phrase: string) => {\n    const now = Date.now();\n    \n    // Check cooldown\n    if (now - lastTriggerTime < COOLDOWN_DURATION) {\n      triggerHaptic();\n      return;\n    }\n    \n    setSelectedPhrase(phrase);\n    setLastTriggerTime(now);\n    onPhraseTriggered?.(phrase, installationState.currentScene);\n    triggerHaptic();\n    console.log('🎤 Phrase triggered from remote:', phrase);\n    \n    setTimeout(() => setSelectedPhrase(null), 1200);\n  };\n\n  const handleScene1Next = () => {\n    if (!currentScene || currentScene.phrases.length === 0) return;\n    \n    const now = Date.now();\n    if (now - lastTriggerTime < COOLDOWN_DURATION) {\n      triggerHaptic();\n      return;\n    }\n    \n    const phrase = currentScene.phrases[scene1Index];\n    onPhraseTriggered?.(phrase, 1);\n    setLastTriggerTime(now);\n    triggerHaptic();\n    \n    setScene1Index((scene1Index + 1) % currentScene.phrases.length);\n  };\n\n  const handleScene4Next = () => {\n    if (!currentScene || currentScene.phrases.length === 0) return;\n    \n    const now = Date.now();\n    if (now - lastTriggerTime < COOLDOWN_DURATION) {\n      triggerHaptic();\n      return;\n    }\n    \n    const phrase = currentScene.phrases[scene4Index];\n    onPhraseTriggered?.(phrase, 4);\n    setLastTriggerTime(now);\n    triggerHaptic();\n    \n    setScene4Index((scene4Index + 1) % currentScene.phrases.length);\n  };\n\n  const handleScene2Start = () => {\n    const now = Date.now();\n    if (now - lastTriggerTime < COOLDOWN_DURATION) {\n      triggerHaptic();\n      return;\n    }\n    \n    triggerHaptic();\n    setLastTriggerTime(now);\n    onSceneChange?.(3);\n    console.log('Scene 2 start button clicked - transitioning to Scene 3');\n  };\n\n  const handleVolumeChange = (newVolume: number[]) => {\n    const vol = newVolume[0];\n    setVolume(vol);\n    const normalizedVolume = vol / 100;\n    setIsMuted(vol === 0);\n    onVolumeChange?.(normalizedVolume);\n    console.log('Volume changed to:', vol + '%');\n  };\n\n  const handleVolumeToggle = () => {\n    const newMuted = !isMuted;\n    setIsMuted(newMuted);\n    const newVol = newMuted ? 0 : 80;\n    setVolume(newVol);\n    onVolumeChange?.(newVol / 100);\n    console.log('Volume toggled:', newMuted ? 'muted' : 'unmuted');\n  };\n\n  const handleEmergencyStop = () => {\n    onSceneChange?.(1); // Reset to first scene\n    console.log('Emergency stop triggered');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-blue-950 to-slate-900 p-4\" data-testid=\"remote-control\">\n      <div className=\"max-w-md mx-auto space-y-6\">\n        {/* Header */}\n        <Card className=\"border-teal-500/30 bg-black/40 backdrop-blur-sm\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-teal-300 text-xl font-bold\">\n                Gador SNC 85th\n              </CardTitle>\n              <ConnectionStatus isConnected={installationState.isConnected} />\n            </div>\n            <p className=\"text-blue-200 text-sm opacity-80\">\n              Interactive Installation Control\n            </p>\n          </CardHeader>\n        </Card>\n\n        {/* Scene Selection */}\n        <Card className=\"border-blue-500/30 bg-black/40 backdrop-blur-sm\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-blue-300 text-lg\">Scenes</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <SceneSelector\n              scenes={SCENES}\n              currentSceneId={installationState.currentScene}\n              onSceneSelect={onSceneChange}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Current Scene Info with Activity Indicators */}\n        {currentScene && (\n          <Card className=\"border-teal-500/30 bg-black/40 backdrop-blur-sm\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-teal-300 text-lg\">{currentScene.name}</CardTitle>\n                <Badge variant=\"outline\" className=\"border-teal-400 text-teal-300\">\n                  Active\n                </Badge>\n              </div>\n              <p className=\"text-blue-200 text-sm opacity-80\">\n                {currentScene.description}\n              </p>\n              \n              {/* Scene-specific status */}\n              {cooldownProgress > 0 && (\n                <div className=\"mt-3\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"text-xs text-blue-300\">Trigger Cooldown</span>\n                    <span className=\"text-xs text-blue-400\">{Math.ceil((100 - cooldownProgress) * 0.02)}s</span>\n                  </div>\n                  <Progress value={cooldownProgress} className=\"h-1\" />\n                </div>\n              )}\n            </CardHeader>\n            \n            {/* Scene 1: Sequential button */}\n            {currentScene.id === 1 && currentScene.phrases.length > 0 && (\n              <CardContent className=\"space-y-3\">\n                <h4 className=\"text-white font-medium mb-3\">Sequential Phrases ({scene1Index + 1}/{currentScene.phrases.length})</h4>\n                <div className=\"mb-3 p-3 bg-blue-500/10 border border-blue-400/30 rounded-md\">\n                  <p className=\"text-sm text-blue-200 italic\">\"{currentScene.phrases[scene1Index]}\"</p>\n                </div>\n                <Button\n                  size=\"lg\"\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white border-blue-500\"\n                  onClick={handleScene1Next}\n                  disabled={cooldownProgress > 0}\n                  data-testid=\"button-scene1-next\"\n                >\n                  <Play className=\"w-5 h-5 mr-3\" />\n                  Trigger Next Phrase\n                </Button>\n              </CardContent>\n            )}\n\n            {/* Scene 2: Start button */}\n            {currentScene.id === 2 && (\n              <CardContent className=\"space-y-3\">\n                <Button\n                  size=\"lg\"\n                  className=\"w-full bg-green-600 hover:bg-green-700 text-white border-green-500\"\n                  onClick={handleScene2Start}\n                  disabled={cooldownProgress > 0}\n                  data-testid=\"button-scene2-start\"\n                >\n                  <Play className=\"w-5 h-5 mr-3\" />\n                  Start\n                </Button>\n              </CardContent>\n            )}\n\n            {/* Scene 3: Individual buttons */}\n            {currentScene.id === 3 && currentScene.phrases.length > 0 && (\n              <CardContent className=\"space-y-3\">\n                <h4 className=\"text-white font-medium mb-3\">Trigger Individual Phrases:</h4>\n                <div className=\"space-y-2\">\n                  {currentScene.phrases.map((phrase, index) => {\n                    const isSelected = selectedPhrase === phrase;\n                    const isOnCooldown = cooldownProgress > 0;\n                    const isDisabled = isOnCooldown && !isSelected;\n                    \n                    return (\n                      <Button\n                        key={index}\n                        variant={isSelected ? \"default\" : \"outline\"}\n                        disabled={isDisabled}\n                        className={`w-full text-left h-auto py-3 px-4 transition-all duration-200 ${\n                          isSelected\n                            ? 'bg-teal-600 border-teal-400 text-white shadow-lg shadow-teal-500/20' \n                            : isDisabled\n                              ? 'border-gray-600 text-gray-500 opacity-50 cursor-not-allowed'\n                              : 'border-blue-400/50 text-blue-200 hover:border-blue-400 hover-elevate'\n                        } ${hapticFeedback && isSelected ? 'scale-95' : ''}`}\n                        onClick={() => handlePhraseSelect(phrase)}\n                        data-testid={`button-phrase-${index}`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Play className={`w-4 h-4 flex-shrink-0 ${\n                            isSelected ? 'text-white' : isDisabled ? 'text-gray-500' : 'text-blue-400'\n                          }`} />\n                          <span className=\"text-sm leading-relaxed\">{phrase}</span>\n                        </div>\n                      </Button>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            )}\n\n            {/* Scene 4: Sequential button */}\n            {currentScene.id === 4 && currentScene.phrases.length > 0 && (\n              <CardContent className=\"space-y-3\">\n                <h4 className=\"text-white font-medium mb-3\">Sequential Closing ({scene4Index + 1}/{currentScene.phrases.length})</h4>\n                <div className=\"mb-3 p-3 bg-purple-500/10 border border-purple-400/30 rounded-md\">\n                  <p className=\"text-sm text-purple-200 italic\">\"{currentScene.phrases[scene4Index]}\"</p>\n                </div>\n                <Button\n                  size=\"lg\"\n                  className=\"w-full bg-purple-600 hover:bg-purple-700 text-white border-purple-500\"\n                  onClick={handleScene4Next}\n                  disabled={cooldownProgress > 0}\n                  data-testid=\"button-scene4-next\"\n                >\n                  <Play className=\"w-5 h-5 mr-3\" />\n                  Trigger Next Phrase\n                </Button>\n              </CardContent>\n            )}\n          </Card>\n        )}\n\n\n        {/* Enhanced Volume Controls */}\n        <Card className=\"border-gray-500/30 bg-black/40 backdrop-blur-sm\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-gray-300 text-lg\">Audio Controls</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Volume Slider */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm text-gray-300\">Volume</label>\n                <span className=\"text-sm text-gray-400\">{Math.round(volume)}%</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <VolumeX className=\"w-4 h-4 text-gray-400\" />\n                <Slider\n                  value={[volume]}\n                  onValueChange={handleVolumeChange}\n                  max={100}\n                  step={5}\n                  className=\"flex-1\"\n                  data-testid=\"slider-volume\"\n                />\n                <Volume2 className=\"w-4 h-4 text-gray-400\" />\n              </div>\n            </div>\n            \n            {/* Control Buttons */}\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className={`flex-1 ${\n                  isMuted \n                    ? 'border-red-400 text-red-300 hover:border-red-300' \n                    : 'border-green-400 text-green-300 hover:border-green-300'\n                }`}\n                onClick={handleVolumeToggle}\n                data-testid=\"button-volume-toggle\"\n              >\n                {isMuted ? (\n                  <VolumeX className=\"w-5 h-5 mr-2\" />\n                ) : (\n                  <Volume2 className=\"w-5 h-5 mr-2\" />\n                )}\n                {isMuted ? 'Unmute' : 'Mute'}\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"flex-1 border-red-400 text-red-300 hover:border-red-300 hover-elevate\"\n                onClick={handleEmergencyStop}\n                data-testid=\"button-emergency-stop\"\n              >\n                <Square className=\"w-5 h-5 mr-2\" />\n                Reset\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center pt-4\">\n          <p className=\"text-blue-200/60 text-xs\">\n            Interactive Motion Design Installation\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14734},"client/src/components/SceneSelector.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Scene } from '@shared/schema';\nimport { Play, Users, Camera, Sparkles, Home } from 'lucide-react';\n\ninterface SceneSelectorProps {\n  scenes: Scene[];\n  currentSceneId: number;\n  onSceneSelect?: (sceneId: number) => void;\n}\n\nconst getSceneIcon = (sceneName: string) => {\n  switch (sceneName) {\n    case 'Chaotic Thoughts':\n      return Sparkles;\n    case 'Magic Microphone':\n      return Play;\n    case 'Collective Energy':\n      return Users;\n    case 'Photo Booth':\n      return Camera;\n    case 'Closing Thoughtscape':\n      return Home;\n    default:\n      return Play;\n  }\n};\n\nconst getSceneColor = (sceneId: number, isActive: boolean) => {\n  const colors = {\n    1: isActive ? 'bg-purple-600 border-purple-400 text-white' : 'border-purple-400/50 text-purple-300 hover:border-purple-400',\n    2: isActive ? 'bg-blue-600 border-blue-400 text-white' : 'border-blue-400/50 text-blue-300 hover:border-blue-400',\n    3: isActive ? 'bg-green-600 border-green-400 text-white' : 'border-green-400/50 text-green-300 hover:border-green-400',\n    4: isActive ? 'bg-orange-600 border-orange-400 text-white' : 'border-orange-400/50 text-orange-300 hover:border-orange-400',\n    5: isActive ? 'bg-teal-600 border-teal-400 text-white' : 'border-teal-400/50 text-teal-300 hover:border-teal-400',\n  };\n  return colors[sceneId as keyof typeof colors] || colors[1];\n};\n\nexport default function SceneSelector({ scenes, currentSceneId, onSceneSelect }: SceneSelectorProps) {\n  const handleSceneSelect = (sceneId: number) => {\n    onSceneSelect?.(sceneId);\n    console.log('Scene selected:', sceneId);\n  };\n\n  return (\n    <div className=\"space-y-2\" data-testid=\"scene-selector\">\n      {scenes.map((scene) => {\n        const isActive = scene.id === currentSceneId;\n        const Icon = getSceneIcon(scene.name);\n        const colorClasses = getSceneColor(scene.id, isActive);\n        \n        return (\n          <Button\n            key={scene.id}\n            variant={isActive ? \"default\" : \"outline\"}\n            className={`w-full text-left h-auto py-3 px-4 ${colorClasses}`}\n            onClick={() => handleSceneSelect(scene.id)}\n            data-testid={`button-scene-${scene.id}`}\n          >\n            <div className=\"flex items-center gap-3\">\n              <Icon className={`w-5 h-5 flex-shrink-0 ${\n                isActive ? 'text-white' : ''\n              }`} />\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-base\">{scene.name}</div>\n                <div className={`text-xs opacity-75 ${\n                  isActive ? 'text-white/80' : 'text-current'\n                }`}>\n                  {scene.description}\n                </div>\n              </div>\n              {scene.phrases.length > 0 && (\n                <div className={`text-xs px-2 py-1 rounded-full ${\n                  isActive \n                    ? 'bg-white/20 text-white' \n                    : 'bg-current/10 text-current'\n                }`}>\n                  {scene.phrases.length}\n                </div>\n              )}\n            </div>\n          </Button>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":3166},"client/src/components/StageDisplay.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport FloatingPhrase from './FloatingPhrase';\nimport FloatingIcon from './FloatingIcon';\nimport PhotoBooth from './PhotoBooth';\nimport { InstallationState, PhraseState, SCENES } from '@shared/schema';\nimport { gsap } from 'gsap';\n\ninterface StageDisplayProps {\n  installationState: InstallationState;\n  onStateChange?: (newState: InstallationState) => void;\n}\n\n// Ghost phrases for background - from mental health campaign\nconst GHOST_PHRASES = [\n  \"qué hacer\",\n  \"debería cancelar\",\n  \"no puedo concentrarme\",\n  \"tengo que verme\",\n  \"incómodo\",\n  \"por qué\",\n  \"inseguro\",\n  \"capaz no es suficiente\",\n  \"me olvido\",\n];\n\nexport default function StageDisplay({ installationState, onStateChange }: StageDisplayProps) {\n  const [phrases, setPhrases] = useState<PhraseState[]>(installationState.activePhrases);\n  const [floatingIcons, setFloatingIcons] = useState<Array<{ id: string }>>([]);\n  const [showPhotoMode, setShowPhotoMode] = useState(false);\n  const ghostContainerRef = useRef<HTMLDivElement>(null);\n  \n  // Audio system\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  const playAudio = useCallback((id: string) => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    \n    audio.currentTime = 0;\n    audio.volume = 0.55;\n    audio.play().catch(e => console.log('Audio blocked'));\n  }, []);\n\n  useEffect(() => {\n    setPhrases(installationState.activePhrases);\n    \n    // Check if we're in photo mode\n    const currentScene = SCENES.find(s => s.id === installationState.currentScene);\n    setShowPhotoMode(currentScene?.name === 'Photo Booth');\n    \n    // Clear phrases on scene change\n    setPhrases([]);\n    console.log(`🔄 Scene changed to ${installationState.currentScene}, cleared all phrases`);\n  }, [installationState]);\n\n  // Background ghost phrases removed per user request\n\n  // Phrase-to-lane mapping\n  const getPhraseConfig = (text: string, sceneId: number) => {\n    const scenePhraseMappings = {\n      1: [\n        { text: \"¿Y si me olvido de lo que tengo que decir?\", lane: 'B' as const, entry: 'draw' as const },\n        { text: \"Capaz no es suficiente lo que preparé...\", lane: 'A' as const, entry: 'focus' as const },\n        { text: \"¿Desenchufé la planchita de pelo?\", lane: 'C' as const, entry: 'flash' as const },\n        { text: \"¿Cómo hago para subirlos a todos al barco de Sistema Nervioso Central?\", lane: 'D' as const, entry: 'mask' as const },\n        { text: \"¿Por qué no me habré puesto zapatos más cómodos?\", lane: 'B' as const, entry: 'focus' as const },\n      ],\n      3: [\n        { text: \"Espero que Rocío no me pregunte nada difícil\", lane: 'B' as const, entry: 'mask' as const },\n        { text: \"Necesito ese micrófono… ¿estará en Mercado Libre?\", lane: 'C' as const, entry: 'flash' as const },\n        { text: \"Rocío… ¡te olvidaste de presentarme! Tenemos que anunciar mi nueva posición.\", lane: 'A' as const, entry: 'focus' as const },\n      ],\n      4: [\n        { text: \"¡Sí! Juntos podemos, ¡vamos con todo!\", lane: 'A' as const, entry: 'focus' as const },\n        { text: \"¿Nos sacamos una foto todos juntos?\", lane: 'B' as const, entry: 'flash' as const },\n        { text: \"¡Lo vamos a lograr!\", lane: 'C' as const, entry: 'mask' as const },\n        { text: \"¡Qué bueno estar acá con todos!\", lane: 'D' as const, entry: 'flash' as const },\n      ]\n    };\n\n    const sceneMapping = scenePhraseMappings[sceneId as keyof typeof scenePhraseMappings];\n    if (sceneMapping) {\n      const config = sceneMapping.find(p => p.text === text);\n      if (config) return config;\n    }\n\n    return { lane: 'B' as const, entry: 'focus' as const };\n  };\n\n  const triggerPhrase = (phraseText: string, sceneId: number) => {\n    // PREVENT DUPLICATES\n    const existingPhrase = phrases.find(p => p.text === phraseText && p.isActive);\n    if (existingPhrase) {\n      console.log(`⚠️ Phrase already active, skipping: \"${phraseText}\"`);\n      return;\n    }\n\n    const config = getPhraseConfig(phraseText, sceneId);\n    \n    const newPhrase: PhraseState & { lane: string; entry: string } = {\n      id: `phrase-${Date.now()}-${Math.random()}`,\n      text: phraseText,\n      layer: 'front',\n      opacity: 1,\n      position: {\n        x: window.innerWidth / 2,\n        y: window.innerHeight * 0.38,\n        z: 0,\n      },\n      isActive: true,\n      sceneId,\n      lane: config.lane,\n      entry: config.entry,\n    };\n\n    setPhrases(prev => [...prev, newPhrase]);\n    console.log(`✅ Triggered phrase: \"${phraseText}\" | Lane: ${config.lane} | Entry: ${config.entry}`);\n    \n    // NOTIFICATIONS STAY FOREVER - no auto-cleanup\n    \n    playAudio(newPhrase.id);\n  };\n\n  // SCENE ORCHESTRATION - Simplified for manual control\n\n  // Show ALL notifications - they never leave\n  const visiblePhrases = phrases;\n\n  return (\n    <div \n      id=\"stage\"\n      className=\"relative w-full h-screen overflow-hidden\"\n      style={{ \n        background: '#c7c7c7',\n        cursor: 'default'\n      }}\n      data-testid=\"stage-display\"\n    >\n      \n      {/* Notifications scattered - NIGHTMARE MODE */}\n      <div \n        id=\"notifications-stack\"\n        className=\"absolute inset-0 pointer-events-none\"\n        style={{ \n          zIndex: 10,\n        }}\n        data-testid=\"notifications-stack\"\n      >\n        {visiblePhrases.map((phrase, index) => (\n          <FloatingPhrase \n            key={phrase.id}\n            phrase={phrase}\n            lane={(phrase as any).lane || 'B'}\n            entryStyle={(phrase as any).entry || 'focus'}\n            stackIndex={index}\n            onAnimationComplete={() => {\n              setPhrases(prev => prev.filter(p => p.id !== phrase.id));\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Íconos flotantes independientes */}\n      <div \n        id=\"floating-icons\"\n        className=\"absolute inset-0 pointer-events-none\"\n        style={{ \n          zIndex: 5,\n        }}\n        data-testid=\"floating-icons\"\n      >\n        {floatingIcons.map((icon) => (\n          <FloatingIcon\n            key={icon.id}\n            id={icon.id}\n            onAnimationComplete={() => {\n              setFloatingIcons(prev => prev.filter(i => i.id !== icon.id));\n            }}\n          />\n        ))}\n      </div>\n      \n      {showPhotoMode && (\n        <PhotoBooth \n          onComplete={() => {\n            setShowPhotoMode(false);\n          }}\n        />\n      )}\n      \n      {/* Audio element */}\n      <audio \n        ref={audioRef}\n        preload=\"auto\"\n        data-testid=\"phrase-audio\"\n      >\n        <source src=\"/audio/phrase-sound.mp3\" type=\"audio/mpeg\" />\n        <source src=\"/audio/phrase-sound.wav\" type=\"audio/wav\" />\n      </audio>\n      \n    </div>\n  );\n}\n","size_bytes":6776},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/ConnectionStatus.tsx":{"content":"import ConnectionStatus from '../ConnectionStatus';\n\nexport default function ConnectionStatusExample() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-blue-950 to-slate-900 p-8\">\n      <div className=\"max-w-md mx-auto space-y-8\">\n        <h1 className=\"text-2xl font-bold text-teal-300 mb-6 text-center\">\n          Connection Status Demo\n        </h1>\n        \n        <div className=\"space-y-4\">\n          <div className=\"p-4 border border-gray-600 rounded-lg\">\n            <h3 className=\"text-white mb-2\">Connected State</h3>\n            <ConnectionStatus isConnected={true} latency={45} />\n          </div>\n          \n          <div className=\"p-4 border border-gray-600 rounded-lg\">\n            <h3 className=\"text-white mb-2\">Disconnected State</h3>\n            <ConnectionStatus isConnected={false} />\n          </div>\n          \n          <div className=\"p-4 border border-gray-600 rounded-lg\">\n            <h3 className=\"text-white mb-2\">High Latency</h3>\n            <ConnectionStatus isConnected={true} latency={250} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1127},"client/src/components/examples/FloatingPhrase.tsx":{"content":"import FloatingPhrase from '../FloatingPhrase';\nimport { PhraseState } from '@shared/schema';\n\nexport default function FloatingPhraseExample() {\n  const samplePhrases: PhraseState[] = [\n    {\n      id: 'phrase-1',\n      text: '¿Y si me olvido de lo que tengo que decir?',\n      layer: 'front',\n      opacity: 1,\n      position: { x: 100, y: 150 },\n      isActive: true,\n      sceneId: 1,\n    },\n    {\n      id: 'phrase-2',\n      text: '¡Lo vamos a lograr!',\n      layer: 'floating',\n      opacity: 0.8,\n      position: { x: 300, y: 300 },\n      isActive: true,\n      sceneId: 3,\n    },\n    {\n      id: 'phrase-3',\n      text: '¿Cómo hago para subirlos a todos al barco de Sistema Nervioso Central?',\n      layer: 'return',\n      opacity: 0.65,\n      position: { x: 150, y: 450 },\n      isActive: true,\n      sceneId: 1,\n    },\n  ];\n\n  return (\n    <div className=\"relative w-full h-screen bg-gradient-to-br from-slate-950 via-blue-950 to-slate-900 overflow-hidden\">\n      {samplePhrases.map(phrase => (\n        <FloatingPhrase key={phrase.id} phrase={phrase} />\n      ))}\n      \n      <div className=\"absolute top-4 left-4 z-50\">\n        <div className=\"px-4 py-2 bg-black/50 backdrop-blur-sm border border-teal-500/30 rounded-lg\">\n          <p className=\"text-teal-300 text-sm font-medium\">\n            Floating Phrases Demo\n          </p>\n          <p className=\"text-blue-200 text-xs opacity-80\">\n            Different layers and opacity levels\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1512},"client/src/components/examples/NeuralBackground.tsx":{"content":"import NeuralBackground from '../NeuralBackground';\n\nexport default function NeuralBackgroundExample() {\n  return (\n    <div className=\"relative w-full h-screen overflow-hidden\">\n      <NeuralBackground \n        intensity={0.8}\n        particleCount={60}\n        connectionDistance={180}\n        pulseActive={true}\n      />\n      <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold text-teal-300 mb-2\"\n              style={{ textShadow: '0 0 20px hsl(178, 100%, 33%)' }}>\n            Neural Network Background\n          </h1>\n          <p className=\"text-blue-200\">Pulsating neuron-inspired connections</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":755},"client/src/components/examples/PhotoBooth.tsx":{"content":"import PhotoBooth from '../PhotoBooth';\n\nexport default function PhotoBoothExample() {\n  return (\n    <PhotoBooth \n      onComplete={() => console.log('Photo booth completed')}\n      onCancel={() => console.log('Photo booth cancelled')}\n    />\n  );\n}","size_bytes":250},"client/src/components/examples/RemoteControl.tsx":{"content":"import RemoteControl from '../RemoteControl';\nimport { InstallationState } from '@shared/schema';\n\nexport default function RemoteControlExample() {\n  const mockState: InstallationState = {\n    currentScene: 1,\n    activePhrases: [],\n    isConnected: true,\n    volume: 0.8,\n  };\n\n  return (\n    <RemoteControl \n      installationState={mockState}\n      onSceneChange={(sceneId) => console.log('Scene changed to:', sceneId)}\n      onPhraseTriggered={(phrase, sceneId) => console.log('Phrase triggered:', phrase, 'in scene:', sceneId)}\n      onPhotoTrigger={() => console.log('Photo triggered')}\n      onVolumeChange={(volume) => console.log('Volume changed to:', volume)}\n    />\n  );\n}","size_bytes":683},"client/src/components/examples/SceneSelector.tsx":{"content":"import SceneSelector from '../SceneSelector';\nimport { SCENES } from '@shared/schema';\n\nexport default function SceneSelectorExample() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-blue-950 to-slate-900 p-8\">\n      <div className=\"max-w-md mx-auto\">\n        <h1 className=\"text-2xl font-bold text-teal-300 mb-6 text-center\">\n          Scene Selector Demo\n        </h1>\n        <SceneSelector\n          scenes={SCENES}\n          currentSceneId={2}\n          onSceneSelect={(sceneId) => console.log('Scene selected:', sceneId)}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":604},"client/src/components/examples/StageDisplay.tsx":{"content":"import StageDisplay from '../StageDisplay';\nimport { InstallationState } from '@shared/schema';\n\nexport default function StageDisplayExample() {\n  const mockState: InstallationState = {\n    currentScene: 1,\n    activePhrases: [],\n    isConnected: true,\n    volume: 0.8,\n  };\n\n  return (\n    <StageDisplay \n      installationState={mockState}\n      onStateChange={(newState) => console.log('State changed:', newState)}\n    />\n  );\n}","size_bytes":431},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/NotificationToast.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\nimport { PhraseState } from '@shared/schema';\n\ninterface NotificationToastProps {\n  phrase: PhraseState;\n  onAnimationComplete?: () => void;\n  variant?: 'grey' | 'blue' | 'green';\n}\n\n/**\n * GADOR MENTAL HEALTH CAMPAIGN - NOTIFICATION TOAST\n * iOS-style notification cards on white background\n * Simple entrance animations without crazy effects\n */\n\nconst VARIANT_STYLES = {\n  grey: {\n    bg: '#F7F8FA',\n    titleColor: '#374151',\n    msgColor: '#0F172A',\n    metaColor: '#6B7280',\n    iconBg: 'linear-gradient(180deg, #00A99D, #78C4E6)',\n  },\n  blue: {\n    bg: '#2F6BED',\n    titleColor: 'rgba(255,255,255,0.9)',\n    msgColor: '#FFFFFF',\n    metaColor: 'rgba(255,255,255,0.9)',\n    iconBg: 'linear-gradient(180deg, #00A99D, #78C4E6)',\n  },\n  green: {\n    bg: '#0B1F17',\n    titleColor: '#E8FFF5',\n    msgColor: '#E8FFF5',\n    metaColor: 'rgba(232,255,245,0.8)',\n    iconBg: 'linear-gradient(180deg, #0EA36E, #00A99D)',\n  }\n};\n\nconst ICONS = ['💬', '⚡', '🔔', '🧠', '💭', '📱'];\n\nexport default function NotificationToast({ \n  phrase, \n  onAnimationComplete,\n  variant = 'grey'\n}: NotificationToastProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const masterTimeline = useRef<gsap.core.Timeline | null>(null);\n\n  useEffect(() => {\n    if (containerRef.current) {\n      initializeAnimation();\n    }\n    \n    return () => {\n      if (masterTimeline.current) {\n        masterTimeline.current.kill();\n      }\n    };\n  }, [phrase.id]);\n\n  const initializeAnimation = () => {\n    const el = containerRef.current;\n    if (!el) return;\n\n    // Get random rotation for this notification\n    const rotation = gsap.utils.random(-2, 3);\n    \n    // SIMPLE ENTRANCE: slide up + fade in\n    gsap.set(el, { \n      opacity: 0, \n      y: 12, \n      scale: 0.995, \n      rotate: rotation,\n      transformOrigin: \"50% 50%\" \n    });\n    \n    const tl = gsap.timeline();\n    \n    // Entrada suave - NO crazy animation\n    tl.to(el, { \n      opacity: 1, \n      y: 0, \n      scale: 1, \n      duration: 0.42, \n      ease: \"cubic-bezier(.22,.61,.36,1)\" \n    });\n    \n    // Hold readable\n    tl.to(el, { duration: 1.2 });\n    \n    // IDLE: subtle floating - only 6px up/down, very gentle\n    tl.to(el, { \n      y: \"+=6\", \n      duration: 3.2, \n      yoyo: true, \n      repeat: -1, \n      ease: \"sine.inOut\" \n    }, \"<\");\n    \n    // Very subtle rotation drift\n    tl.to(el, { \n      rotate: `+=${gsap.utils.random(-0.6, 0.6)}`, \n      duration: 6, \n      yoyo: true, \n      repeat: -1, \n      ease: \"sine.inOut\" \n    }, \"<\");\n\n    masterTimeline.current = tl;\n  };\n\n  const styles = VARIANT_STYLES[variant];\n  const icon = ICONS[Math.floor(Math.random() * ICONS.length)];\n  \n  // Generate meta time\n  const metas = ['ahora', 'hace 1 min', 'hace 2 min', 'lun 1:21'];\n  const meta = metas[Math.floor(Math.random() * metas.length)];\n\n  return (\n    <div \n      ref={containerRef}\n      className=\"pointer-events-none select-none\"\n      style={{\n        position: 'relative',\n        display: 'flex',\n        gap: '12px',\n        alignItems: 'flex-start',\n        borderRadius: '18px',\n        padding: '16px 18px',\n        margin: '16px 0',\n        border: '1px solid rgba(15,23,42,0.06)',\n        boxShadow: '0 12px 28px rgba(15,23,42,0.10), 0 3px 8px rgba(15,23,42,0.06)',\n        background: styles.bg,\n        willChange: 'transform, opacity',\n        maxWidth: '600px',\n      }}\n      data-testid={`notification-toast-${phrase.id}`}\n    >\n      {/* Icon */}\n      <div \n        style={{\n          width: '40px',\n          height: '40px',\n          borderRadius: '12px',\n          display: 'grid',\n          placeItems: 'center',\n          flexShrink: 0,\n          fontSize: '18px',\n          background: styles.iconBg,\n          color: '#fff',\n          boxShadow: '0 2px 6px rgba(0,0,0,.08), inset 0 0 0 2px rgba(255,255,255,.75)',\n        }}\n        aria-hidden=\"true\"\n      >\n        {icon}\n      </div>\n      \n      {/* Body */}\n      <div style={{ flex: 1, minWidth: 0 }}>\n        <div \n          style={{\n            fontFamily: '\"Avenir Next\", Helvetica, sans-serif',\n            fontWeight: 600,\n            fontSize: '14px',\n            lineHeight: 1.3,\n            color: styles.titleColor,\n            letterSpacing: '0.2px',\n          }}\n        >\n          {variant === 'blue' ? 'Te enviaste un mensaje' : variant === 'green' ? 'Chat' : 'Notificación'}\n        </div>\n        <div \n          style={{\n            fontFamily: '\"Avenir Next\", Helvetica, sans-serif',\n            fontWeight: 600,\n            fontSize: 'clamp(18px, 2.1vw, 28px)',\n            lineHeight: 1.15,\n            color: styles.msgColor,\n            marginTop: '2px',\n            wordBreak: 'break-word',\n          }}\n        >\n          {phrase.text}\n        </div>\n      </div>\n      \n      {/* Meta */}\n      <div \n        style={{\n          color: styles.metaColor,\n          fontFamily: '\"Avenir Next\", Helvetica, sans-serif',\n          fontWeight: 400,\n          fontSize: '12px',\n          lineHeight: 1,\n          marginLeft: '8px',\n        }}\n      >\n        {meta}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5168},"client/src/components/FloatingIcon.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\nimport { MessageCircle, Mail, Camera, Phone, MessageSquare, Calendar, Music, Bell, Heart, AlertCircle, BatteryLow, Wifi, Volume2 } from 'lucide-react';\n\ninterface FloatingIconProps {\n  id: string;\n  onAnimationComplete?: () => void;\n}\n\n// Íconos flotantes independientes - solo el ícono, sin notificación\nconst SOLO_ICON_OPTIONS = [\n  { icon: MessageCircle, bg: '#25D366' }, // WhatsApp\n  { icon: Mail, bg: '#EA4335' }, // Gmail\n  { icon: Camera, bg: '#E1306C' }, // Instagram\n  { icon: Phone, bg: '#007AFF' }, // Phone\n  { icon: MessageSquare, bg: '#FFCC00' }, // SMS\n  { icon: Calendar, bg: '#FF3B30' }, // Calendar\n  { icon: Music, bg: '#1DB954' }, // Spotify\n  { icon: Bell, bg: '#5856D6' }, // Notification\n  { icon: Heart, bg: '#FF2D55' }, // Health\n  { icon: AlertCircle, bg: '#FFCC00' }, // Alert\n  { icon: BatteryLow, bg: '#FF3B30' }, // Battery\n  { icon: Wifi, bg: '#007AFF' }, // WiFi\n  { icon: Volume2, bg: '#34C759' }, // Sound\n];\n\nexport default function FloatingIcon({ id, onAnimationComplete }: FloatingIconProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const masterTimeline = useRef<gsap.core.Timeline | null>(null);\n\n  useEffect(() => {\n    if (containerRef.current) {\n      initializeAnimation();\n    }\n    \n    return () => {\n      if (masterTimeline.current) {\n        masterTimeline.current.kill();\n      }\n    };\n  }, [id]);\n\n  const initializeAnimation = () => {\n    const el = containerRef.current;\n    if (!el) return;\n\n    // Posición aleatoria\n    const randomX = gsap.utils.random(10, 90); \n    const randomY = gsap.utils.random(10, 90); \n    const rotation = gsap.utils.random(-25, 25); // Mucha variación\n    const size = gsap.utils.random(50, 80); // Tamaños variados\n    \n    gsap.set(el, { \n      position: 'absolute',\n      left: `${randomX}%`,\n      top: `${randomY}%`,\n      transform: `translate(-50%, -50%)`,\n      opacity: 0, \n      scale: 0.5,\n      rotate: rotation,\n      transformOrigin: \"50% 50%\",\n    });\n    \n    const tl = gsap.timeline({\n      onComplete: () => {\n        if (onAnimationComplete) {\n          onAnimationComplete();\n        }\n      }\n    });\n    \n    // Entrada rápida\n    tl.to(el, { \n      opacity: 0.7, \n      scale: 1, \n      duration: 0.4, \n      ease: \"back.out(1.5)\",\n      delay: gsap.utils.random(0, 1) // Delay aleatorio\n    });\n    \n    // Floating dinámico\n    tl.to(el, { \n      y: `+=${gsap.utils.random(-20, 20)}`,\n      x: `+=${gsap.utils.random(-15, 15)}`,\n      duration: 2.5, \n      yoyo: true, \n      repeat: 3,\n      ease: \"sine.inOut\" \n    }, \"+=0.2\");\n    \n    // Rotación continua\n    tl.to(el, { \n      rotate: `+=${gsap.utils.random(-30, 30)}`,\n      duration: 3, \n      yoyo: true, \n      repeat: 2,\n      ease: \"sine.inOut\" \n    }, \"<\");\n\n    // Fade out\n    tl.to(el, {\n      opacity: 0,\n      scale: 0.6,\n      duration: 0.6,\n      ease: \"power2.in\"\n    }, \"+=1.5\");\n\n    masterTimeline.current = tl;\n  };\n\n  // Hash para selección aleatoria\n  const getHash = (str: string) => {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n    return Math.abs(hash);\n  };\n\n  const iconHash = getHash(id);\n  const iconConfig = SOLO_ICON_OPTIONS[iconHash % SOLO_ICON_OPTIONS.length];\n  const IconComponent = iconConfig.icon;\n  const size = 50 + (iconHash % 30); // Entre 50 y 80px\n\n  return (\n    <div \n      ref={containerRef}\n      className=\"pointer-events-none select-none\"\n      style={{\n        position: 'absolute',\n        width: `${size}px`,\n        height: `${size}px`,\n        borderRadius: '50%',\n        display: 'grid',\n        placeItems: 'center',\n        backgroundColor: iconConfig.bg,\n        color: '#FFFFFF',\n        boxShadow: '0 8px 24px rgba(0,0,0,0.15)',\n        willChange: 'transform, opacity',\n      }}\n      data-testid={`floating-icon-${id}`}\n    >\n      <IconComponent size={size * 0.5} strokeWidth={2.5} />\n    </div>\n  );\n}\n","size_bytes":4061}},"version":1}